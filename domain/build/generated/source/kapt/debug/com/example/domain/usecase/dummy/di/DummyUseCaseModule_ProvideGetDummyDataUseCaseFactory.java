// Generated by Dagger (https://dagger.dev).
package com.example.domain.usecase.dummy.di;

import com.example.domain.usecase.dummy.GetDummyDataUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DummyUseCaseModule_ProvideGetDummyDataUseCaseFactory implements Factory<GetDummyDataUseCase> {
  private final DummyUseCaseModule module;

  public DummyUseCaseModule_ProvideGetDummyDataUseCaseFactory(DummyUseCaseModule module) {
    this.module = module;
  }

  @Override
  public GetDummyDataUseCase get() {
    return provideGetDummyDataUseCase(module);
  }

  public static DummyUseCaseModule_ProvideGetDummyDataUseCaseFactory create(
      DummyUseCaseModule module) {
    return new DummyUseCaseModule_ProvideGetDummyDataUseCaseFactory(module);
  }

  public static GetDummyDataUseCase provideGetDummyDataUseCase(DummyUseCaseModule instance) {
    return Preconditions.checkNotNullFromProvides(instance.provideGetDummyDataUseCase());
  }
}
